datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Resume SaaS Models Start ---

enum DocumentType {
  RESUME
  COVER_LETTER
}

model UserProfile {
  id                  String    @id @default(uuid())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  firstName           String?
  lastName            String?
  phone               String?
  location            String?
  languages           String?
  awards              String?

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String    @unique // A user should have only one profile

  education           EducationEntry[]
  experience          ExperienceEntry[]
}

model EducationEntry {
  id             String    @id @default(cuid())
  school         String?
  fieldOfStudy   String?
  graduationDate String?
  location       String?
  userProfile    UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId  String
}

model ExperienceEntry {
  id              String      @id @default(uuid())
  employer        String?
  jobTitle        String?
  startDate       String?
  endDate         String?
  location        String?
  workDescription String?     @db.Text
  userProfile     UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId   String
}

model UploadedResume {
  id                  String    @id @default(uuid())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  originalFilename    String
  fileKey             String    // Consistent with existing File model's 'key' field, assuming it's a storage key
  fileType            String    // e.g., "application/pdf", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
}

model GeneratedDocument {
  id                  String        @id @default(uuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  documentType        DocumentType  // Using the enum
  content             String        @db.Text // For potentially long text
  customizationParams Json          // Store customization options as JSON
  templateName        String?       // e.g., "classic", "modern"

  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
}

// --- Resume SaaS Models End ---

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  isAdmin                   Boolean         @default(false)

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus        String?         // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'hobby', 'pro'
  datePaid                  DateTime?
  credits                   Int             @default(3)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  userProfile               UserProfile?       // Added for resume SaaS
  uploadedResumes           UploadedResume[]   // Added for resume SaaS
  generatedDocuments        GeneratedDocument[] // Added for resume SaaS
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  repliedAt                 DateTime?
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}
